version: 2.1

workflows:
  version: 2
  build-test-and-maybe-deploy:
    jobs:
      - java-project
      - java-project-1:
          requires:
            - java-project
      - csharp-project
      - csharp-project-1:
          requires:
            - csharp-project
      - deploy:
          requires:
            - java-project
            - java-project-1
            - csharp-project
            - csharp-project-1
          filters:
            branches:
              only:
                - /release-.*/

jobs:
  java-project:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      -  attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd java/HelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  java-project-1:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            pwd
            ls
            cd java/SecondHelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  csharp-project:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
      - run:
          name: Build
          command: |
            cd csharp/HelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  csharp-project-1:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
      - run:
          name: Build
          command: |
            cd csharp/SecondHelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  deploy:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "17:87:32:b5:2b:dd:3e:ce:3f:6e:71:68:7d:c4:4f:65"
      - run:
          name: Setup environment
          command: |
            apt-get update
            apt-get -y upgrade
            apt-get install -y openjdk-11-jdk
            apt-get install -y maven
            apt-get install -y wget curl
            wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            dpkg -i packages-microsoft-prod.deb
            apt-get install -y apt-transport-https
            apt-get update
            apt-get install -y dotnet-sdk-2.1
            dotnet tool install -g dotnet-setversion
            export PATH="$PATH:/root/.dotnet/tools"
      - run:
          name: Deploy HelloWorld
          command: |
            cd java/HelloWorld

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            RELEASE_VERSION=`echo ${CIRCLE_BRANCH} | cut -f2 -d'-'`
            BASE_VERSION=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
            VERSION_SUFFIX=`echo ${BASE_VERSION} | cut -f2 -d'-'`

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              ./scripts/release_snapshot.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${VERSION_SUFFIX}" != "SNAPSHOT" ]]; then
              echo "Deploy prod artifact"
              ./scripts/release_prod.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi

            cd ../../
      - run:
          name: Deploy SecondHelloWorld
          command: |
            cd java/SecondHelloWorld

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            RELEASE_VERSION=`echo ${CIRCLE_BRANCH} | cut -f2 -d'-'`
            BASE_VERSION=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
            VERSION_SUFFIX=`echo ${BASE_VERSION} | cut -f2 -d'-'`

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              ./scripts/release_snapshot.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${VERSION_SUFFIX}" != "SNAPSHOT" ]]; then
              echo "Deploy prod artifact"
              ./scripts/release_prod.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi

            cd ../../
      - run:
          name: Deploy HelloWorld
          command: |
            cd csharp/HelloWorld

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            RELEASE_VERSION=`echo ${CIRCLE_BRANCH} | cut -f2 -d'-'`
            BASE_VERSION=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
            VERSION_SUFFIX=`echo ${BASE_VERSION} | cut -f2 -d'-'`

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              ./scripts/release_snapshot.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${VERSION_SUFFIX}" != "alpha" ]]; then
              echo "Deploy prod artifact"
              ./scripts/release_prod.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi

            cd ../../
      - run:
          name: Deploy SecondHelloWorld
          command: |
            cd csharp/SecondHelloWorld

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            RELEASE_VERSION=`echo ${CIRCLE_BRANCH} | cut -f2 -d'-'`
            BASE_VERSION=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
            VERSION_SUFFIX=`echo ${BASE_VERSION} | cut -f2 -d'-'`

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              ./scripts/release_snapshot.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${VERSION_SUFFIX}" != "alpha" ]]; then
              echo "Deploy prod artifact"
              ./scripts/release_prod.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - run:
          name: Create GitHub tag
          command: |
              RELEASE_VERSION=`echo ${CIRCLE_BRANCH} | cut -f2 -d'-'`
              git checkout master
              git push origin master
              TAG="v${RELEASE_VERSION}"
              git tag -f ${TAG}
              git push origin ${TAG}


  