version: 2.1

workflows:
  version: 2
  build-test-and-maybe-deploy:
    jobs:
      - java-hello-world
      - java-second-hello-world:
          requires:
            - java-hello-world
      - csharp-hello-world
      - csharp-second-hello-world:
          requires:
            - csharp-hello-world
      - go-hello-world
      - go-second-hello-world:
          requires:
            - go-hello-world


commands:
  deploy-project:
    description: "Deploy the specified project"
    parameters:
      project:
        type: string
      version:
        type: string
      version_suffix:
        type: string
    steps:
      - run:
          name: Deploy
          command: |
            if [[ "${CI_PULL_REQUEST}" != "" ]]; then
              echo "Skipping deployment for PR"
              circleci step halt
            else
               cd <<parameters.project>>

               # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
               RELEASE_VERSION=`echo ${CIRCLE_BRANCH} | cut -f2 -d'-'`
               BASE_VERSION=$(<<parameters.version>>)
               VERSION_SUFFIX=`echo ${BASE_VERSION} | cut -f2 -d'-'`

               if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${VERSION_SUFFIX}" != "<<parameters.version_suffix>>" ]]; then
                 ./scripts/release_prod.sh
               else
                 echo "Not releasable build, skipping deployment step"
               fi
            fi
  add-git-key:
    description: "Add GitHub Key"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "17:87:32:b5:2b:dd:3e:ce:3f:6e:71:68:7d:c4:4f:65"

jobs:
  java-hello-world:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - add-git-key
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd java/HelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
      - deploy-project:
          project: java/HelloWorld
          version: mvn -q -DforceStdout help:evaluate -Dexpression=project.version
          version_suffix: SNAPSHOT
  java-second-hello-world:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - add-git-key
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |

            cd java/SecondHelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
      - deploy-project:
          project: java/SecondHelloWorld
          version: mvn -q -DforceStdout help:evaluate -Dexpression=project.version
          version_suffix: SNAPSHOT
  csharp-hello-world:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
        environment:
          NUGET_SOURCE: https://api.nuget.org/v3/index.json
    steps:
      - checkout
      - add-git-key
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            dotnet tool install -g dotnet-setversion
      - run:
          name: Build
          command: |
            cd csharp/HelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
      - deploy-project:
          project: csharp/HelloWorld
          version: xmllint --xpath "//Project/PropertyGroup/Version/text()" Directory.Build.props
          version_suffix: alpha
  csharp-second-hello-world:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
        environment:
          NUGET_SOURCE: https://api.nuget.org/v3/index.json
    steps:
      - checkout
      - add-git-key
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            dotnet tool install -g dotnet-setversion
      - run:
          name: Build
          command: |
            cd csharp/SecondHelloWorld
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
      - deploy-project:
          project: csharp/HelloWorld
          version: xmllint --xpath "//Project/PropertyGroup/Version/text()" Directory.Build.props
          version_suffix: alpha
  go-hello-world:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - add-git-key
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
            - go-mod-v4-{{ .Branch }}-
            - go-mod-v4-
      - run:
          name: Build
          command: |
            cd go/HelloWorld
            ./scripts/build.sh
      - save_cache:
          paths:
            - /go/pkg/mod
          key: go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
      - deploy-project:
          project: go/HelloWorld
          version: cat .version
          version_suffix: alpha
  go-second-hello-world:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - add-git-key
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
            - go-mod-v4-{{ .Branch }}-
            - go-mod-v4-
      - run:
          name: Build
          command: |
            cd go/SecondHelloWorld
            ./scripts/build.sh
      - save_cache:
          paths:
            - /go/pkg/mod
          key: go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
      - deploy-project:
          project: go/SecondHelloWorld
          version: cat .version
          version_suffix: alpha